#!/bin/bash

###########################################
# Purpose: Adds a machine account to the directory
# Author: SDW
# Incept 20140909

# Notes: - basic LDAP authentication must already be configured and working
#          on the server where this script is run from

f_Usage () {
   echo "$0 USAGE"
   echo ""
   echo "$0 -h <hostname> -s <serial> -pn <product name> -ip <ip adress> -ru <requesting user> -bg <business group>"
   echo ""
}



# Set path to the location of the script no matter how it was invoked
if [[ `echo $0 | sed 's/^.\///g'` == `basename $0` ]]; then
   WORKDIR=`pwd`
else
   BASENAME=`basename $0`
   WORKDIR=`echo $0 | sed 's/'"$BASENAME"'$//g'`
fi

cd $WORKDIR

. /usr/ldap_tools/bin/ldap_env.sh

# Configure logging
LOGFILE="${LOG_DIR}/${TS}.`basename $0`"


# Start logging
echo "${TS}:`basename $0`:Executed by $USER ($EUID):Arguments $@" >> $LOGFILE


# Temp file to hold any ldif that we might need to push to the directory
LDIF_TMP=/usr/ldap_tools/tmp/.`basename $0`.$$.ldt
echo "${TS}:`basename $0`:TMP file $LDIF_TMP" >> $LOGFILE


# Get information from the command line

RAW_HOSTNAME=`echo $@ | awk -F'-h' '{print $2}' | awk -F' -' '{print $1}'`
echo "${TS}:`basename $0`:INFO: RAW_HOSTNAME=${RAW_HOSTNAME}" >> $LOGFILE
RAW_SERIAL=`echo $@ | awk -F'-s' '{print $2}' | awk -F' -' '{print $1}'`
echo "${TS}:`basename $0`:INFO: SERIAL=${SERIAL}" >> $LOGFILE
PN=`echo $@ | awk -F'-pn' '{print $2}' | awk -F' -' '{print $1}'`
echo "${TS}:`basename $0`:INFO: PN=${PN}" >> $LOGFILE
IPADDR=`echo $@ | awk -F'-ip' '{print $2}' | awk -F' -' '{print $1}' | sed 's/^ //g'`
echo "${TS}:`basename $0`:INFO: IPADDR=${IPADDR}" >> $LOGFILE
REQUESTING_USER=`echo $@ | awk -F'-ru' '{print $2}' | awk -F' -' '{print $1}'`
echo "${TS}:`basename $0`:INFO: REQUESTING_USER=${REQUESTING_USER}" >> $LOGFILE
BUSINESS_GROUP=`echo $@ | awk -F'-bg' '{print $2}' | awk -F' -' '{print $1}'`
echo "${TS}:`basename $0`:INFO: BUSINESS_GROUP=${BUSINESS_GROUP}" >> $LOGFILE

if [[ $# -le 0 ]]; then
   f_Usage
   exit 0
fi

VALID_ARGS=TRUE
# Verify required arguments
if [[ -z $RAW_HOSTNAME ]]; then
   echo "ERROR: hostname not provided"
   echo "${TS}:`basename $0`:ERROR: hostname not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi
if [[ -z $RAW_SERIAL ]]; then
   echo "ERROR: system serial not provided" 
   echo "${TS}:`basename $0`:ERROR: system serial not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi
if [[ -z $PN ]]; then
   echo "ERROR: product name not provided"
   echo "${TS}:`basename $0`:ERROR: product name not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi
if [[ -z $IPADDR ]]; then
   echo "ERROR: IP address not provided" 
   echo "${TS}:`basename $0`:ERROR: IP address not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi
if [[ -z $REQUESTING_USER ]]; then
   echo "ERROR: requesting user not provided"
   echo "${TS}:`basename $0`:ERROR: requesting user not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi
if [[ -z $BUSINESS_GROUP ]]; then
   echo "ERROR: business group not provided"
   echo "${TS}:`basename $0`:ERROR: business group not provided" >> $LOGFILE
   VALID_ARGS=FALSE
fi

if [[ $VALID_ARGS == FALSE ]]; then
   echo "FAILURE: Required arguments missing"
   echo "${TS}:`basename $0`:FAILURE: required arguments missing - exiting with code 7" >> $LOGFILE
   exit 7
fi
  


SUFFIX="_machine"
SUBOU="Machines"

NAME=`echo $RAW_HOSTNAME | /bin/awk -F'.' '{print $1}'`

# Reformat the serial number
# This will reformat either a standard VMware serial OR a UUID ito a standard VMware serial
SERIAL=`echo $RAW_SERIAL | sed 's/VMware//gI;s/ //g;s/-//g;s/\(.*\)/\L\1/;s/.\{2\}/&\ /g;s/./-/24;s/^/ VMware-/'`



# If we got a name from the command line
if [[ -n $NAME ]]; then
   # Remove unsafe characters from the name
   SNAME=`echo $NAME | tr -d '\`!@$%^&*()+=/|[]{}:;"\\'\''' | sed 's/_users$//; s/_hosts//; s/_sa$//; s/_machine//'`
   echo "${TS}:`basename $0`:INFO: sanitized name set to $SNAME" >> $LOGFILE

   # Construct the new netgroup name by adding the suffix - if the user didn't provide it on the command line
   NNGNAME="${SNAME}${SUFFIX}"
   echo "${TS}:`basename $0`:INFO: new Netgroup name set to $NNGNAME" >> $LOGFILE

   # Check for duplicates and exit on error
   echo "$LDAP_SEARCH -b $NG_BASE \"(cn=${NNGNAME})\" 2>&1 | egrep -v '^#|^$|^search|^result'"
   if [[ -n `$LDAP_SEARCH -b $NG_BASE "(cn=${NNGNAME})" 2>&1 | egrep -v '^#|^$|^search|^result'` ]]; then
      echo "ERROR: a netgroup named \"$NNGNAME\" already exists."
      echo "${TS}:`basename $0`:FAILURE: new Netgroup name $NNGNAME already exists in the directory - exiting code 1" >> $LOGFILE
      exit 1
   fi

# If we did NOT get a name from the command line 
else 

   # Exit with an error
   echo "ERROR: machine name not received on command line"
   echo "${TS}:`basename $0`:FAILURE: machine name not derrived from command line - exiting code 2" >> $LOGFILE
   exit 2
fi

TIME=`date +%Y%m%d%H%M%Z`


# Create the ldif

cat << EOF > $LDIF_TMP
dn: cn=$NNGNAME,ou=$SUBOU,$NG_BASE
cn: $NNGNAME
objectClass: top
objectClass: nisnetgroup
memberNisNetgroup: UnixAdmin_users
memberNisNetgroup: StorageAdmin_users
memberNisNetgroup: EITNightOps_users
memberNisNetgroup: eitscanp_sa
memberNisNetgroup: eitvcacp_sa
nisNetgroupTriple: ($SNAME,-,)
Description: :::$SERIAL::$SNAME::$PN::$TIME::$IPADDR::$REQUESTING_USER:::
EOF

# Write netgrup creation details to the backup logs
if [[ ! -d $BACKUP_DIR ]]; then
   mkdir -p $BACKUP_DIR
fi
LDIF_BAK=${BACKUP_DIR}/ng_created_${NNGNAME}_${TS}.ldif
echo "${TS}:`basename $0`:INFO: creation log filename set to $LDIF_BAK" >> $LOGFILE

echo "## Script Name: $0" > $LDIF_BAK
echo "## Executed By/From: `/usr/bin/who -m`" >> $LDIF_BAK
echo "##" >> $LDIF_BAK

cat $LDIF_TMP >> $LDIF_BAK
if [[ ! -s $LDIF_BAK ]]; then
   echo "Error: there was a problem writing the create log for $NNGNAME"
   echo "${TS}:`basename $0`:FAILURE: Problem writing creation log $LDIF_BAK - exiting code 3" >> $LOGFILE
   exit 3
fi
   
echo "$LDAP_BT" | /bin/bash 2>&1 >/dev/null
if [[ $? != 0 ]]; then
   echo "Error: bind DN $UPDATE_USER or password not accepted by LDAP server"
   echo "${TS}:`basename $0`:FAILURE: bind DN $UPDATE_USER or password not accepted by LDAP server - exiting code 4" >> $LOGFILE
   exit 4
else

   #echo "   $LDAP_MODIFY -a -f $LDIF_TMP"
   #echo "   $LDIF_BAK"
   #exit
   echo "$LDAP_MODIFY -w \"$UPDATE_PASS\" -a -f $LDIF_TMP " | /bin/bash
   if [[ $? != 0 ]]; then
      echo "There was an error adding the object(s)"
      echo "The command that failed was:"
      echo "   $LDAP_MODIFY -a -f $LDIF_TMP"
      echo ""
      echo "## Update failed" >> $LDIF_BAK
      echo "${TS}:`basename $0`:FAILURE: LDAP update ended with a non-zero return code. $LDIF_TMP is being preserved for troubleshooting - exiting code 5" >> $LOGFILE
      exit 5
   fi
   echo "## Update succeeded" >> $LDIF_BAK
   echo "${TS}:`basename $0`:INFO: LDAP update completed successfully - log ends" >> $LOGFILE
   /bin/rm $LDIF_TMP
fi

exit 0

