#!/bin/bash

###########################################
# Purpose: Update a posix user's LDAP password
# Author: SDW
# Incept 08/14/2012

# Notes: - basic LDAP authentication must already be configured and working
#          on the server where this script is run from
# Set path to the location of the script no matter how it was invoked

if [[ `echo $0 | sed 's/^.\///g'` == `basename $0` ]]; then
   WORKDIR=`pwd`
else
   BASENAME=`basename $0`
   WORKDIR=`echo $0 | sed 's/'"$BASENAME"'$//g'`
fi

cd $WORKDIR

# Set some basic options for ldap searching, durrently the directory server doesn't require a binddn or a rootbinddn
# so simple authentication should work fine
LDAP_SEARCH="/usr/bin/ldapsearch -x -ZZ"
UPDATE_USER=`ldapsearch -x -ZZ "(uid=$USER)" dn | grep ^dn: | sed 's/^dn:[ \t]//'`
LDAP_MODIFY="/usr/bin/ldapmodify -x -ZZ -D \"$UPDATE_USER\""
LDAP_BT="$LDAP_SEARCH '(ou=SUDOers)' -D \"$UPDATE_USER\" -w"
MAXTRIES=5

TS=`date +%Y%m%d%H%M%S`
BACKUP_DIR=/eit/admin/scripts/ldap_tools/local_backup

# Temp file to hold any ldif that we might need to push to the directory
LDIF_TMP=/eit/admin/scripts/ldap_tools/tmp/.`basename $0`.$$.ldt

# find the ldap base
if [[ -s /etc/ldap.conf ]]; then
   LDC=/etc/ldap.conf
elif [[ -s /etc/openldap/ldap.conf ]]; then
   LDC=/etc/openldap/ldap.conf
fi
LDAP_BASE=`egrep -i "^base[ \t]" $LDC | sed 's/^base[ \t]//i'`

if [[ -z $LDAP_BASE ]]; then 
   echo "Unable to find the base dn for LDAP - please make sure ldap is properly"
   echo "configured on this machine.  If it IS properly configured and you're"
   echo "still getting this error, you probably need to update the LDAP_SEARCH"
   echo "variable in this script to something that works with the current config."
   exit
fi

if [[ -z $UPDATE_USER ]]; then
   echo "Unable to locate the correct DN for your user account [$USER]."
   echo "You must be a member of the domain in order to use this script."
   exit
fi

# Get information from the user

USER=$1
MODE=$2
PASS=$3



# If we got a user from the command line
if [[ -n $USER ]]; then

    
    if [[ -z `$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${USER}))" | egrep -v '^#|^$|^search:|^result:'` ]]; then
       echo "ERROR: user $USER not found in the directory."
       exit
    fi

    #USERDN=`$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${USER}))" dn | egrep -v '^#|^$|^search:|^result:' | sed 's/^dn: "//'`
    USERDN=`$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${USER}))" dn | sed ':a;N;$!ba;s/\n //g' | grep "^dn:" | sed 's/^dn: "//'`

# If we did NOT get user from the command line
else

   # Ask the user to provide a user name
   VC1=FALSE
   while [[ $VC1 == FALSE ]]; do
      unset GUSER
      read -p "Which user do you want to update the password for?: " GUSER
      if [[ -z `$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${GUSER}))" | egrep -v '^#|^$|^search:|^result:'` ]]; then 
         echo "ERROR: user $GUSER not found in the directory."
         read -p "Press Enter to try again, Ctrl+C to quit: " JUNK
         tput cuu1;tput el;tput cuu1;tput el;tput cuu1;tput el
      else
         VC1=TRUE
         USER=$GUSER
         #USERDN=`$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${USER}))" dn | egrep -v '^#|^$|^search:|^result:' | sed 's/^dn: "//'`
         USERDN=`$LDAP_SEARCH "(&(objectClass=posixaccount)(uid=${USER}))" dn | sed ':a;N;$!ba;s/\n //g' | grep '^dn:' | sed 's/^dn: "//'`
      fi
   done

fi

unset TYPE
# If we got a mode from the command line
if [[ -n $MODE ]]; then
   # Make sure the mode is valid
   if [[ "$MODE" == "-p" ]]; then
      TYPE=PLAIN
   elif [[ "$MODE" == "-c" ]]; then
      TYPE=CRYPTED
   else
      echo "ERROR: \"$MODE\" is not a valid option."
   fi

# If we did NOT get mode from the command line
else 

   # Prompt the user for a mode
   VC2=FALSE
   while [[ $VC2 == FALSE ]]; do
      unset GMODE
      echo "Are you providing a plain text password or a crypted password?"
      read -p "(Plain Text = p / Crypted = c): " GMODE
      if [[ -n `echo $GMODE | grep -i '^p'` ]]; then
         TYPE=PLAIN  
         VC2=TRUE
      elif [[ -n `echo $GMODE | grep -i '^c'` ]]; then
         TYPE=CRYPTED
         VC2=TRUE
      else
         echo "\"$GMODE\" is not a valid option."
         read -p "Press Enter to try again, Ctrl+c to quit: " JUNK
         tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el
      fi
   
   done
fi

# If we did NOT get a password from the command line
if [[ -z $PASS ]]; then
   if [[ $TYPE == CRYPTED ]]; then
      VCC=NO
      while [[ $VCC == NO ]]; do
         echo "Specify the password hashing algorithm:"
         echo ""
         echo "  1) CRYPT (pick this one if you aren't sure)"
         echo "  2) MD5"
         echo "  3) SSHA256 (pick this if the hash came from LDAP)"
         echo ""
         read -p "Algorithm: " PHA
         if [[ "$PHA" -lt 1 ]] || [[ "$PHA" -gt 3 ]]; then
            echo "$PHA is not a valid choice."
            unset PHA
            read -p "Press Enter to try again, Ctrl+C to quit " JUNK
            tput cuu1; tput el; tput cuu1; tput el;tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el;
         elif [[ "$PHA" == 1 ]]; then
            PHASTRING="{CRYPT}"
            VCC=YES
         elif [[ "$PHA" == 2 ]]; then
            PHASTRING="{MD5}"
            VCC=YES
         elif [[ "$PHA" == 3 ]]; then
            PHASTRING="{SSHA256}"
            VCC=YES
         fi
      done
      
      read -p "Please enter the new password hash for \"$USER\": " PASS
   else
      read -sp "Please enter the new password for \"$USER\": " PASS
      echo -en "\n\n"
   fi
fi




if [[ $TYPE == CRYPTED ]]; then
   PASS="${PHASTRING}${PASS}"
fi

# Create the update ldif
cat << EOF > $LDIF_TMP
$USERDN
changetype: modify
replace: userPassword
userPassword: $PASS
EOF

PASSLOG=/eit/admin/scripts/ldap_tools/tmp/pwupd.log

echo "${TS}:$USERDN:`/usr/bin/who -m`" >> $PASSLOG

# Verify LDAP update user password
VP=FALSE
TRIES=0
while [[ $VP == FALSE ]] && [[ $TRIES -le $MAXTRIES ]]; do
   read -sp "LDAP Admin Password ($UPDATE_USER): " UUP
   echo "$LDAP_BT \"$UUP\"" | /bin/bash 2>&1 >/dev/null
   if [[ $? != 0 ]]; then
      unset UUP
      let TRIES=$TRIES+1
   else
      echo ""
      VP=TRUE
   fi
done


echo "$LDAP_MODIFY -w \"$UUP\" -a -f $LDIF_TMP " | /bin/bash
if [[ $? != 0 ]]; then
   echo "There was an error adding the object(s)"
   echo "The command that failed was:"
   echo "   $LDAP_MODIFY -W -a -f $LDIF_TMP"
   echo ""
   echo "${TS}:$USERDN:Update Failed" >> $PASSLOG
   exit
fi

echo "${TS}:$USERDN:Update Succeeded" >> $PASSLOG
   
/bin/rm $LDIF_TMP



