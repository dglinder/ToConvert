#!/bin/bash

###########################################
# Purpose: Edit an LDAP service account
# Author: SDW
# Incept 09/12/2012

# Notes: - basic LDAP authentication must already be configured and working
#          on the server where this script is run from
f_Usage () {
   echo "$0 USAGE"
   echo ""
   echo "$0"
   echo ""
   echo "  Interactively creates a new Service Account in the directory."
   echo ""
}

######################################
# f_ValidateSAName
# Function: ensures that the given service account name conforms to standards
# Requires: the following global variables must be set: VALIDPREFIX VALIDSUFFIX VALIDLENGTH
# Usage: f_ValidateSAName <string>
# Returns: "VALID" or "INVALID"
f_ValidateSAName () {


   unset SANTV

   SANTV=$1

   RESULT=VALID

   # Begin validation of the provided SA
   if [[ $RESULT == VALID ]]; then
      
      # Check length restrictions
      if [[ `/usr/bin/expr length $SANTV` != $VALIDLENGTH ]]; then
         RESULT=INVALID
      fi

   fi

   if [[ $RESULT == VALID ]]; then

      # Check prefix/suffix restrictions
      PPTRN=`echo $VALIDPREFIX | sed 's/^/^/;s/ /|^/g;s/$//'`
      SPTRN=`echo $VALIDSUFFIX | sed 's/ /$|/g;s/$/$/'`
      if [[ -z `echo $SANTV | egrep "${PPTRN}"` ]] || [[ -z `echo $SANTV | egrep "${SPTRN}"` ]]; then
         RESULT=INVALID
      fi

   fi

   echo $RESULT


}

export VALIDPREFIX="wbs itc wic eit wng wni"
#export VALIDSUFFIX="p d t q b r v s"
export VALIDSUFFIX="p d t q s"
export VALIDLENGTH=8


# Set path to the location of the script no matter how it was invoked
if [[ `echo $0 | sed 's/^.\///g'` == `basename $0` ]]; then
   WORKDIR=`pwd`
else
   BASENAME=`basename $0`
   WORKDIR=`echo $0 | sed 's/'"$BASENAME"'$//g'`
fi

cd $WORKDIR

# Set some basic options for ldap searching, durrently the directory server doesn't require a binddn or a rootbinddn
# so simple authentication should work fine
LDAP_SEARCH="/usr/bin/ldapsearch -x -ZZ"
UPDATE_USER=`ldapsearch -x -ZZ "(uid=$USER)" dn | grep ^dn: | sed 's/^dn:[ \t]//'`
LDAP_MODIFY="/usr/bin/ldapmodify -x -ZZ -D \"$UPDATE_USER\""
LDAP_BT="$LDAP_SEARCH '(ou=SUDOers)' -D \"$UPDATE_USER\" -w"
MAXTRIES=5
BACKUP_DIR=/eit/admin/scripts/ldap_tools/local_backup
TS=`date +%Y%m%d%H%M%S`


# Temp file to hold any ldif that we might need to push to the directory
LDIF_TMP=/eit/admin/scripts/ldap_tools/tmp/.`basename $0`.$$.ldt


# find the ldap base
if [[ -s /etc/ldap.conf ]]; then
   LDC=/etc/ldap.conf
elif [[ -s /etc/openldap/ldap.conf ]]; then
   LDC=/etc/openldap/ldap.conf
fi
LDAP_BASE=`egrep -i "^base[ \t]" $LDC | sed 's/^base[ \t]//i'`

if [[ -z $LDAP_BASE ]]; then 
   echo "Unable to find the base dn for LDAP - please make sure ldap is properly"
   echo "configured on this machine.  If it IS properly configured and you're"
   echo "still getting this error, you probably need to update the LDAP_SEARCH"
   echo "variable in this script to something that works with the current config."
   exit
fi

if [[ -z $UPDATE_USER ]]; then
   echo "Unable to locate the correct DN for your user account [$USER]."
   echo "You must be a member of the domain in order to use this script."
   exit
fi

if [[ "$1" == "--help" ]]; then
   f_Usage
   exit
fi

# For auto-generation of UID/GID

START_UID=40000
MAX_UID=65000
DEFAULT_GID=40000

# Find next available UID:
unset NEXT_AVAILABLE
CHECK=$START_UID
UIDLIST=" `$LDAP_SEARCH '(uidnumber=*)' uidnumber | grep ^uidnumber: | sed 's/^uidnumber:[ \n]//g'` "
while [[ -z $NEXT_AVAILABLE ]] && [[ $CHECK -lt $MAX_UID ]]; do
   #echo "Checking UID $CHECK"
   #$LDAP_SEARCH -b $LDAP_BASE "(uidNumber=$CHECK)" dn | grep "^dn:"
   #if [[ -z `$LDAP_SEARCH -b $LDAP_BASE "(uidNumber=$CHECK)" dn | grep "^dn:"` ]]; then
   if [[ -z `echo $UIDLIST | egrep "${CHECK} | ${CHECK} | ${CHECK}$"` ]]; then
      #echo "No match for $CHECK"
      NEXT_AVAILABLE=$CHECK
   else
      #echo "Match found for $CHECK, incrementing"
      let CHECK=$CHECK+1
   fi

done



# Get information from the user

echo "--|[Create A Service Account]|--"
echo ""
VC1=FALSE
while [[ $VC1 == FALSE ]]; do
   read -p "Service Account Username: " GSAUN


   if [[ -n $GSAUN ]]; then
      SSAUN=`echo $GSAUN | tr -d '\`!@$%^&*()+=/|[]{}:;"\\'\'''`
      
      if [[ `f_ValidateSAName $SSAUN` == VALID ]]; then
   
         # Verify the name isn't already in use
         if [[ -z `$LDAP_SEARCH -b $LDAP_BASE "(uid=$SSAUN)" uid | grep "^uid:"` ]]; then
            VC1=TRUE
         else
            echo "Error: The username \"$SSAUN\" is already in use."
            read -p "Press Enter to try another name, Ctrl+C to quit: " JUNK
            unset GSAUN SSAUN
            tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el
         fi

      else
         echo "Error: the username \"$SSAUN\" does not conform to the"
         echo "       Service Account naming convention."
         echo "       Service Account names must meet the following criteria:"
         echo "          Exactly 8 characters in length"
         echo "          Begin with BU identifier [${VALIDPREFIX}]"
         echo "          End with a tier designation [${VALIDSUFFIX}]"
         echo ""
         read -p "Press Enter to try another name, Ctrl+C to quit: " JUNK
         unset GSAUN SSAUN
         tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;tput cuu1; tput el;
      fi
   else
      echo "Error: username is not optional."
      read -p "Press Enter to try another name, Ctrl+C to quit: " JUNK
      unset GSAUN SSAUN
      tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el
   fi

done

VC2=FALSE
while [[ $VC2 == FALSE ]]; do
   read -p "Service Account numeric UID [$NEXT_AVAILABLE]: " GSAUID
   if [[ -n $GSAUID ]]; then
      SSAUID=`echo $GSAUID | tr -dc "[:digit:]"`
   
      # Verify the uid isn't already in use
      if [[ -z `$LDAP_SEARCH -b $LDAP_BASE "(uidNumber=$SSAUID)" uid | grep "^uid:"` ]]; then
         VC2=TRUE
      else
         echo "Error: The numeric UID \"$SSAUID\" is already in use."
         read -p "Press Enter to try another UID, Ctrl+C to quit: " JUNK
         unset GSAUID SSAUID
         tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el
      fi
   else
      SSAUID=$NEXT_AVAILABLE
      VC2=TRUE
   fi

done

VC3=FALSE
while [[ $VC3 == FALSE ]]; do
   read -p "Service Account numeric GID [$DEFAULT_GID]: " GSAGID
   if [[ -n $GSAGID ]]; then
      SSAGID=`echo $GSAGID | tr -dc "[:digit:]"`

      # Verify the group exists
      if [[ -n `$LDAP_SEARCH -b $LDAP_BASE "(&(objectClass=posixgroup)(gidNumber=$SSAGID))" cn | grep "^cn:"` ]]; then
         VC3=TRUE
      else
         echo "Error: no posix group with the GID \"$SSAGID\" found."
         read -p "Press Enter to try another GID, Ctrl+C to quit: " JUNK
         unset GSAGID SSAGID
         tput cuu1; tput el; tput cuu1; tput el; tput cuu1; tput el
      fi
   else
      SSAGID=$DEFAULT_GID
      VC3=TRUE
   fi

done

read -p "Service Account Home Directory [/home/$SSAUN]: " GSAHD
if [[ -n $GSAHD ]]; then
   SSAHD=$GSAHD
else
   SSAHD=/home/$SSAUN
fi

read -p "Service Account Shell [/bin/ksh]: " GSASH
if [[ -n $GSASH ]]; then
   SSASH=$GSASH
else
   SSASH=/bin/ksh
fi

read -p "Service Account Description (GECOS): " GSADE

SSADE=$GSADE

read -sp "Service Account Initial Password: " GSAPW
echo -en "\n\n"

SSAPW=$GSAPW

if [[ -f $LDIF_TMP ]]; then
   /bin/rm $LDIF_TMP
fi

# Specify the DN of the SUDO role to be edited and specify that we're modifying it
cat << EOF >> $LDIF_TMP
dn: uid=$SSAUN,ou=ServiceAccounts,$LDAP_BASE
cn: $SSAUN
uid: $SSAUN
uidNumber: $SSAUID
gidNumber: $SSAGID
homeDirectory: $SSAHD
loginShell: $SSASH
gecos: $GSADE
userPassword: $SSAPW
objectClass: top
objectClass: account
objectClass: posixaccount

EOF

# Write creation details to the backup logs
if [[ ! -d $BACKUP_DIR ]]; then
   mkdir -p $BACKUP_DIR
fi
LDIF_BAK=${BACKUP_DIR}/sa_created_${SSAUN}_${TS}.ldif

echo "## Script Name: $0" > $LDIF_BAK
echo "## Executed By/From: `/usr/bin/who -m`" >> $LDIF_BAK
echo "##" >> $LDIF_BAK

cat $LDIF_TMP >> $LDIF_BAK
if [[ ! -s $LDIF_BAK ]]; then
   echo "Error: there was a problem writing the create log for $SSAUN"
   exit
#else
#   echo "Create log written: $LDIF_BAK"
fi


# Verify LDAP password
VP=FALSE
TRIES=0
while [[ $VP == FALSE ]] && [[ $TRIES -le $MAXTRIES ]]; do
   read -sp "LDAP Password ($UPDATE_USER): " UUP
   echo "$LDAP_BT \"$UUP\"" | /bin/bash 2>&1 >/dev/null
   if [[ $? != 0 ]]; then
      unset UUP
      let TRIES=$TRIES+1
   else
      echo ""
      VP=TRUE
   fi
done


echo "$LDAP_MODIFY -w \"$UUP\" -a -f $LDIF_TMP " | /bin/bash
if [[ $? != 0 ]]; then
   echo "There was an error adding the object(s)"
   echo "The command that failed was:"
   echo "   $LDAP_MODIFY -W -a -f $LDIF_TMP"
   echo ""
   echo "## Update failed" >> $LDIF_BAK
   exit
fi

echo "## Update succeeded" >> $LDIF_BAK
/bin/rm $LDIF_TMP

exit
echo "Updated $SATBE:"
$LDAP_SEARCH -b ou=ServiceAccounts,$LDAP_BASE "(uid=${SATBE})" 2>&1 | egrep -v '^#|^$|^search|^result'

